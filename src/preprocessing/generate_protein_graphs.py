# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Zp-WZzuqSWXMsnrG2fY0aRnZeNvsu8H-
"""

# src/preprocessing/generate_protein_graphs.py
import os
import sys
import argparse
import torch
from tqdm import tqdm
import pandas as pd # For reading mapping if needed

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from utils.protein_utils import pdb_to_graph, AA_TO_IDX_GRAPH

def create_protein_graphs_from_pdb_dir(pdb_dir, output_path, mapping_csv_path=None):
    """
    Processes all PDB files in a directory to create protein graphs.
    The keys in the output dictionary will be the PDB filenames (without .pdb extension),
    which should correspond to Query_Protein_ID from the mapping file.
    """
    protein_graphs = {}
    pdb_files = [f for f in os.listdir(pdb_dir) if f.endswith(".pdb")]

    if not pdb_files:
        print(f"No PDB files found in {pdb_dir}")
        return

    protein_id_map = None
    if mapping_csv_path:
        try:
            map_df = pd.read_csv(mapping_csv_path)
            # Assuming mapping_csv has 'Query_Protein_ID' which matches PDB filenames (e.g., Protein_0)
            # and 'Protein_Index' which is the numerical index for the dataset
            if 'Query_Protein_ID' in map_df.columns and 'Protein_Index' in map_df.columns:
                 protein_id_map = pd.Series(map_df.Protein_Index.values, index=map_df.Query_Protein_ID).to_dict()
            elif 'Protein_ID' in map_df.columns and 'Original_Protein_Index' in map_df.columns: # Adapt to your specific CSV columns
                 protein_id_map = pd.Series(map_df.Original_Protein_Index.values, index=map_df.Protein_ID).to_dict()


        except FileNotFoundError:
            print(f"Warning: Mapping CSV {mapping_csv_path} not found. Graphs will be keyed by PDB filenames.")


    print(f"Generating protein graphs from PDB files in {pdb_dir}...")
    for pdb_file in tqdm(pdb_files, desc="Processing PDBs"):
        protein_file_id = os.path.splitext(pdb_file)[0] # e.g., "Protein_0"

        # Determine the key for the protein_graphs dictionary
        # This should be the numerical Protein_Index used in affinity tables
        if protein_id_map:
            # Try to map filename (e.g. "Protein_0") to numerical Protein_Index
            # This step depends on how PDBs were named. If they are named by Protein_Index directly, no map needed.
            # If PDBs are named like "Protein_0", "Protein_1" which are the Query_Protein_IDs from UniProt mapping,
            # then we need to map this Query_Protein_ID back to the original Protein_Index.
            # The notebook for Davis PDB download uses `protein_id` (which is Query_Protein_ID) for filename.
            # The `davis_protein_graphs.pt` is keyed by numerical Protein_Index.
            # Let's assume your protein_id_map maps the filename (Query_Protein_ID) to the numerical Protein_Index.
            # Your `proteins.csv` has 'Protein_Index'. Your `uniprot_mapping.csv` has 'Protein_ID' (from FASTA)
            # and 'UniProt_ID'. The downloaded PDBs are named `{protein_id}.pdb` where `protein_id` is 'Protein_ID' from FASTA.
            # So `protein_file_id` is the 'Protein_ID' from FASTA. We need to map this to numerical `Protein_Index`.
            # Let's assume the mapping CSV has "Query_Protein_ID" (matching PDB filenames) and "Original_Protein_Index"
            # Or, if the PDB filenames are already the numerical indices, no map is needed.

            # Based on your KIBA and Davis notebooks, the Protein_Index is the numerical one.
            # The PDBs are saved as `{Protein_ID}.pdb` where Protein_ID is like "Protein_0".
            # The protein_graphs.pt is keyed by the numerical Protein_Index.
            # We need a way to map the PDB filename (e.g. "Protein_0") to the actual numerical Protein_Index.
            # This information seems to be in `proteins.csv` (Protein_Index, Gene_Name/Accession which was used to make FASTA IDs).
            # Let's assume the PDB filename (e.g. "Protein_0") is the identifier that needs to be mapped to Protein_Index (integer).
            # For simplicity now, let's assume the PDB filename *is* the Protein_Index or can be cast to int.
            # If not, the mapping_csv logic is crucial.

            # The protein_graphs dictionary loaded in Davis_GraphDTA3D_model_training.ipynb
            # is keyed by integers (Protein_Index from affinity_df).
            # The PDBs are saved as `Protein_0.pdb`, `Protein_1.pdb`, etc.
            # The `uniprot_mapping.csv` has `Protein_ID` (e.g., "Protein_0") and `UniProt_ID`.
            # We need to ensure the keys in `protein_graphs` are the integer `Protein_Index` values.

            # If filenames are "Protein_0", "Protein_1" etc., extract the number.
            # This assumes Protein_ID in mapping CSV (and PDB filename) is like "Protein_X"
            # And you want to key the final graphs by X (integer).

            final_key = None
            if protein_file_id.startswith("Protein_"):
                 try:
                    final_key = int(protein_file_id.split("_")[1])
                 except (IndexError, ValueError):
                    print(f"Warning: Could not parse numerical index from PDB filename {pdb_file}. Using filename as key.")
                    final_key = protein_file_id # Fallback
            else: # If filename is already numerical or some other format
                try:
                    final_key = int(protein_file_id)
                except ValueError:
                    print(f"Warning: PDB filename {protein_file_id} is not directly convertible to int. Using as string key.")
                    final_key = protein_file_id


        else: # No mapping file, use filename as key (might need conversion to int if possible)
            try:
                final_key = int(protein_file_id)
            except ValueError:
                final_key = protein_file_id


        pdb_full_path = os.path.join(pdb_dir, pdb_file)
        graph = pdb_to_graph(pdb_full_path, aa_to_idx_map=AA_TO_IDX_GRAPH)

        if graph:
            if final_key is not None:
                protein_graphs[final_key] = graph
            else:
                 print(f"Warning: Could not determine a valid integer key for {pdb_file}. Skipping.")
        else:
            print(f"Warning: Failed to generate graph for {pdb_file}.")

    torch.save(protein_graphs, output_path)
    print(f"Saved {len(protein_graphs)} protein graphs to {output_path}")

def main():
    parser = argparse.ArgumentParser(description="Generate protein graphs from PDB files.")
    parser.add_argument("--pdb_dir", type=str, required=True,
                        help="Directory containing PDB files.")
    parser.add_argument("--output_path", type=str, required=True,
                        help="Path to save the processed protein graphs (.pt file).")
    parser.add_argument("--mapping_csv", type=str, default=None,
                        help="(Optional) Path to a CSV file for mapping PDB filenames to numerical Protein_Index. "
                             "CSV should have 'Query_Protein_ID' (matching PDB filename without .pdb) and 'Protein_Index' (the desired integer key).")

    args = parser.parse_args()
    create_protein_graphs_from_pdb_dir(args.pdb_dir, args.output_path, args.mapping_csv)

if __name__ == "__main__":
    # Example for Davis:
    # Assume PDBs are in ./data/davis/pdb_files/ and named Protein_0.pdb, Protein_1.pdb ...
    # And these "Protein_X" correspond to an identifier that needs to be mapped to the integer Protein_Index
    # used in the affinity files.
    # If davis_uniprot_mapping.csv contains Protein_ID (e.g. "Protein_0") and Protein_Index (e.g. 0),
    # then that CSV could be used if PDB filenames were Protein_ID.
    # For now, this script assumes PDB filenames can be directly used or converted to the integer key.
    # The crucial part is that the keys in the saved .pt file must match the Protein_Index in affinity_df.

    # python src/preprocessing/generate_protein_graphs.py --pdb_dir ./data/davis/pdb_files --output_path ./data/processed/davis/davis_protein_graphs.pt
    # python src/preprocessing/generate_protein_graphs.py --pdb_dir ./data/kiba/pdb_files --output_path ./data/processed/kiba/kiba_protein_graphs.pt
    main()