# -*- coding: utf-8 -*-
"""process_drug_graphs

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19qGKMeWcULqS7BSbQ7q2OvtyWEXjdpTx
"""

# src/preprocessing/process_drug_graphs.py
import os
import sys
import pandas as pd
import torch
from tqdm import tqdm
import argparse

# Add src directory to Python path to import utils
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from utils.molecule_utils import smiles_to_graph

def generate_drug_graphs(smiles_series, drug_id_series, output_path):
    """
    Generates drug graphs from SMILES strings and saves them.
    """
    drug_graphs = {}
    unique_drugs = {} # To store unique SMILES with their first encountered ID

    print(f"Processing {len(smiles_series)} SMILES strings...")
    for i in tqdm(range(len(smiles_series))):
        smiles = smiles_series.iloc[i]
        drug_id = drug_id_series.iloc[i]

        if smiles not in unique_drugs:
            unique_drugs[smiles] = drug_id # Store the ID for this unique SMILES
            graph = smiles_to_graph(smiles)
            if graph:
                drug_graphs[drug_id] = graph
            else:
                print(f"Warning: Failed to convert SMILES '{smiles}' (ID: {drug_id}) to graph.")
        elif unique_drugs[smiles] not in drug_graphs:
            # This case handles if the same SMILES appears with a different ID
            # but we only processed it for the first ID. We should ensure all relevant IDs
            # that map to this SMILES point to the same graph if that's the desired behavior,
            # or process per unique drug_id if IDs are paramount.
            # For now, let's assume we map unique SMILES to graphs, using the first ID encountered.
            # If a different ID uses an already processed SMILES, we can link it if needed.
            # The current structure maps graph to drug_id from the iteration.
            # Let's ensure each unique drug_id in the input gets its graph.
            if drug_id not in drug_graphs: # If this specific drug_id hasn't had its graph stored yet
                graph = smiles_to_graph(smiles) # Re-generate or fetch from a temp unique SMILES map
                if graph:
                    drug_graphs[drug_id] = graph


    torch.save(drug_graphs, output_path)
    print(f"Saved {len(drug_graphs)} unique drug graphs to {output_path}")

def main():
    parser = argparse.ArgumentParser(description="Generate drug graph data from CSV.")
    parser.add_argument("--dataset_name", type=str, required=True, choices=["davis", "kiba"],
                        help="Name of the dataset (davis or kiba).")
    parser.add_argument("--csv_path", type=str, required=True,
                        help="Path to the input CSV file containing SMILES and Drug_Index.")
    parser.add_argument("--smiles_col", type=str, required=True,
                        help="Name of the SMILES column in the CSV.")
    parser.add_argument("--drug_id_col", type=str, required=True,
                        help="Name of the Drug_Index/ID column in the CSV.")
    parser.add_argument("--output_dir", type=str, required=True,
                        help="Directory to save the processed drug graph .pt file.")

    args = parser.parse_args()

    df = pd.read_csv(args.csv_path)

    # Ensure unique drug_id processing
    # If multiple rows can have the same drug_id but different SMILES (unlikely for drugs.csv, but possible for affinity files)
    # or if multiple drug_ids can have the same SMILES.
    # We want a graph for each unique drug_id present in the file.

    # Get unique drugs by ID, taking the first SMILES encountered for that ID
    unique_drug_df = df[[args.drug_id_col, args.smiles_col]].drop_duplicates(subset=[args.drug_id_col]).reset_index(drop=True)

    smiles_series = unique_drug_df[args.smiles_col]
    drug_id_series = unique_drug_df[args.drug_id_col]

    output_filename = f"{args.dataset_name}_drug_graphs.pt"
    output_file_path = os.path.join(args.output_dir, output_filename)
    os.makedirs(args.output_dir, exist_ok=True)

    generate_drug_graphs(smiles_series, drug_id_series, output_file_path)

if __name__ == "__main__":
    # Example command for Davis:
    # python src/preprocessing/process_drug_graphs.py --dataset_name davis --csv_path ./data/davis/drugs.csv --smiles_col Canonical_SMILES --drug_id_col Drug_Index --output_dir ./data/processed/davis

    # Example command for KIBA:
    # python src/preprocessing/process_drug_graphs.py --dataset_name kiba --csv_path ./data/kiba/kiba_affinity_df.csv --smiles_col SMILES --drug_id_col Drug_Index --output_dir ./data/processed/kiba
    main()